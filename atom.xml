<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lkq&#39;Page</title>
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-17T16:30:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lkq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js-面向对象</title>
    <link href="http://yoursite.com/2017/01/17/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/01/17/js-面向对象/</id>
    <published>2017-01-17T14:07:28.000Z</published>
    <updated>2017-01-17T16:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为ECMAScript是没有对象概念的</p>
<p>“无序属性的集合”  “其属性可以包括方法、基本值、或者函数”</p>
<p>ECMAScript中有两种属性：数据属性和访问器属性</p>
<p>数据属性：包括一个值的位置   可以读取和写入<br>有四个特性：</p>
<ol>
<li>[Configurable] : 表示能否通过delete删除属性从而重新定义属性或者是能够把属性修改为访问器属性，直接在对象上定义的属性，它们的这个特性值默认为true</li>
<li>[Enumerable] : 表示能通过for-in循环返回属性。直接在对象上定义的属性，它们的这个特性值默认为true</li>
<li>[Writable] : 表示能否修改属性的值。直接在对象上定义的属性，它们的这个特性值默认为true</li>
<li><p>[Value] : 包含这个属性的数据值。默认为undefined。</p>
<p>访问器属性：不包括数据值，包括一对getter和setter函数（都不是必须的）</p>
<p>也有四个特征：</p>
</li>
<li><p>[Configurable] : 表示能否通过delete删除属性从而重新定义属性，能否修改属性的特征，或者能否把属性修改为数据属性。对于直接在对象上定义的属性，这个特征的默认值为true。</p>
</li>
<li>[Enumerable] : 表示能否通过for-in循环返回属性。 直接在对象上定义的属性，它们的这个特性值默认为true</li>
<li>[Get] : 在读取属性时调用的函数。默认值为undefined</li>
<li><p>[Set] : 在写入属性时调用的函数。默认值为undefined</p>
<p>访问器属性不能直接定义，必须使用Object.defineProperty()来定义。<br>例如：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book = &#123;</div><div class="line">	_year: <span class="type">2004</span>,</div><div class="line">	edition: <span class="type">1</span></div><div class="line">&#125;;</div><div class="line">Object.defineProperty(book,<span class="string">"year"</span>,&#123;</div><div class="line">	<span class="keyword">get</span>: <span class="type">function</span>()&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">this</span>._year;</div><div class="line">&#125;,</div><div class="line"><span class="keyword">set</span>: <span class="type">function</span>(<span class="keyword">new</span><span class="type">Value</span>)&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Value</span> &gt; <span class="number">2004</span>)&#123;</div><div class="line">		<span class="built_in">this</span>._year = <span class="keyword">new</span><span class="type">Value</span>;</div><div class="line">		<span class="built_in">this</span>.edition += <span class="keyword">new</span><span class="type">Value</span> - <span class="number">2004</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>ECMAScript5的Object.getOwnPropertyDescriptor()方法，可以取得给定属性的描述符。<br>其接受两个参数：属性所在对象和要读取其描述符的属性名称，返回值是一个对象。</p>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function createPerson(name, age, <span class="keyword">job)&#123;</span></div><div class="line">	var o = new Object()<span class="comment">;</span></div><div class="line">	o.name = name<span class="comment">;</span></div><div class="line">	o.age = age<span class="comment">;</span></div><div class="line">	o.<span class="keyword">job </span>= <span class="keyword">job;</span></div><div class="line">	o.sayName = funciton()&#123;</div><div class="line">		alert(this.name)<span class="comment">;</span></div><div class="line">	&#125;<span class="comment">;</span></div><div class="line">	return o<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解决了创建多个相似对象的问题，但是不能解决对象识别的问题</p>
<h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name, age, job)</span></span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">	<span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>.name);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>没有显示的创建对象；</li>
<li>直接将属性值和方法赋给了this对象</li>
<li>没有return语句</li>
</ol>
<hr>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当做构造函数使用</span></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"jack"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line">person.sayName(); </div><div class="line">	</div><div class="line"><span class="comment">//当做普通函数使用</span></div><div class="line">Person(<span class="string">"jack"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);<span class="comment">//添加到windows</span></div><div class="line"><span class="built_in">window</span>.sayName();</div><div class="line">	</div><div class="line"><span class="comment">//在另个一个对象的作用域中调用</span></div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">Person.call(o, <span class="string">"jack"</span>, <span class="number">25</span>, <span class="string">"Nurse"</span>);</div><div class="line">o.sayName();</div></pre></td></tr></table></figure>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>1.无论什么时候，只要创建了一个新的函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。默认情况下，所有的原型对象都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向prototype属性所在函数的指针。<br><img src="/2017/01/17/js-面向对象/js-prototype 各个对象之间的关系.jpg" alt="logo"></p>
<p>虽然可以通过对象实例访问保存在原型中的值，但却不能通过对象实例重写原型中的值。如果我们在实例中添加了一个属性，而这个属性与实例原型中的一个属性同名，那么我们就在实例中创建该属性，该属性会屏蔽原型中的那个属性。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span></span>&#123;	</div><div class="line">&#125;	</div><div class="line">Person.prototype.name =  <span class="string">"Nicholas"</span>;</div><div class="line">Person.prototype.age =  <span class="number">28</span>;</div><div class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</div><div class="line">	alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line">	</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line">	</div><div class="line">person1.name = <span class="string">"Greg"</span>;</div><div class="line">alert(person1.name);    <span class="comment">//来自实例“Greg”</span></div><div class="line">alert(person2.name);	<span class="comment">//来自原型“Nicholas”</span></div></pre></td></tr></table></figure>
<p> 即使将这个属性设置为null，也只会在实例中设置这个属性，而不会恢复其指向原型的链接。   不过delete操作符则可以完全的删除实例属性，从而让我们能重新访问原型中的属性</p>
<p>2.有两种方式使用in操作符：单独使用和在for-in循环张使用。单独使用时，in操作符会在通过对象能够访问给定属性时返回true，无论该属性存在与实例中还是原型中。</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span></span>()&#123;</div><div class="line">&#125;	</div><div class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</div><div class="line">Person.prototype.age = <span class="number">25</span>;</div><div class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>;</div><div class="line">Person.prototype.sayName = funciton() &#123;</div><div class="line">	alert(<span class="built_in">this</span>.name);</div><div class="line">&#125;;</div><div class="line">	</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="type">Person</span>();</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="type">Person</span>();</div><div class="line">	</div><div class="line">alert(person1.hasOwnPrototy(<span class="string">"name"</span>)); <span class="comment">//false</span></div><div class="line">alert(<span class="string">"name"</span> <span class="keyword">in</span> person1);             <span class="comment">//true</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为ECMAScript是没有对象概念的&lt;/p&gt;
&lt;p&gt;“无序属性的集合”  “其属性可以包括方法、基本值、或者函数”&lt;/p&gt;
&lt;p&gt;ECMAScript中有两种属性：数据属性和访问器属性&lt;/p&gt;
&lt;p&gt;数据属性：包括一个值的位置   可以读取和写入&lt;br&gt;有四个特性：&lt;/
    
    </summary>
    
    
      <category term="js 面向对象" scheme="http://yoursite.com/tags/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>关于Spring aop的一点理解</title>
    <link href="http://yoursite.com/2017/01/14/%E5%85%B3%E4%BA%8ESpring-aop%E7%9A%84%E4%B8%80%E7%82%B9%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/01/14/关于Spring-aop的一点理解/</id>
    <published>2017-01-14T04:17:36.000Z</published>
    <updated>2017-01-17T14:06:45.000Z</updated>
    
    <content type="html"><![CDATA[<p> 工作中要完成Spring+Quartz的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 工作中要完成Spring+Quartz的&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第一篇blog</title>
    <link href="http://yoursite.com/2017/01/11/why-i-can-t-see-my-new-post/"/>
    <id>http://yoursite.com/2017/01/11/why-i-can-t-see-my-new-post/</id>
    <published>2017-01-11T15:19:00.000Z</published>
    <updated>2017-01-12T04:42:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实搭建好Github+hexo的博客环境已经有些日子了。因为拖延症吧，好久都没有在这个平台上写过什么东西。倒是在博客园上写过几篇，是时候把他们转过来了。</p>
<p>对Markdown的语法还不是很熟悉。借着这个机会来熟悉一下。</p>
<p>‘# 一级标题’     </p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>‘## 二级标题’</p>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>以此类推吧</p>
<p>‘&gt; 引用’</p>
<blockquote>
<p>引用</p>
</blockquote>
<p>‘1.有序列表’</p>
<p>‘2.有序列表’</p>
<p>1.有序列表</p>
<p>2.有序列表</p>
<p>‘- 无序列表’ ‘* 无序列表’</p>
<ul>
<li>无序列表</li>
</ul>
<p>超链接的话’[baidu] (www.baidu.com)’（注意中间是没有空格的，为了演示效果才在中间加了空格）</p>
<p><a href="http://www.baidu.com" target="_blank" rel="external">Baidu</a></p>
<p>写代码的话只要用两个``把代码包围起来就可以了。。</p>
<p><code>System.out.println(&quot;hello world&quot;);</code></p>
<p>我记得在哪个软件上用到过 用``包围代码时，加上语言的名字，就可以智能得高亮代码的功能。</p>
<p>暂时用的到的也许就是这些了。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实搭建好Github+hexo的博客环境已经有些日子了。因为拖延症吧，好久都没有在这个平台上写过什么东西。倒是在博客园上写过几篇，是时候把他们转过来了。&lt;/p&gt;
&lt;p&gt;对Markdown的语法还不是很熟悉。借着这个机会来熟悉一下。&lt;/p&gt;
&lt;p&gt;‘# 一级标题’     
    
    </summary>
    
    
      <category term="hexo githubPage Markdown" scheme="http://yoursite.com/tags/hexo-githubPage-Markdown/"/>
    
  </entry>
  
</feed>
