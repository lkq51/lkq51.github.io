<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lkq&#39;Page</title>
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-13T12:46:53.286Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lkq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/06/13/%E5%85%B3%E4%BA%8Esqoop%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/06/13/关于sqoop一些记录/</id>
    <published>2018-06-13T12:46:53.286Z</published>
    <updated>2018-06-13T12:46:53.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用sqoop从oracle导入现有表格和数据到hive时出现数据量倍增"><a href="#利用sqoop从oracle导入现有表格和数据到hive时出现数据量倍增" class="headerlink" title="利用sqoop从oracle导入现有表格和数据到hive时出现数据量倍增"></a>利用sqoop从oracle导入现有表格和数据到hive时出现数据量倍增</h2><p>今在导入两张表A与B时出现了一个问题。</p>
<p>首先是执行命令后提示说jdbc驱动无法加载，这个简单在下载了与oracle数据库对应版本的jdbc驱动后放在了sqoop安装目录的lib文件夹下，即正常。</p>
<p>然后是我将命令错写，本来想先复制表结构到hive中 </p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">sqoop </span><span class="built_in">create-hive-table</span> <span class="built_in">--connect</span> <span class="string">jdbc:oracle:</span><span class="string">thin:</span>@<span class="string">xxx.</span><span class="string">xx.</span><span class="string">xxx.</span><span class="string">xx:xxxx:</span><span class="string">BaseName </span> <span class="built_in">--table</span> <span class="string">OracleTableName </span><span class="built_in">--username</span>  <span class="string">oracleUserName </span><span class="built_in">--password</span> <span class="string">OraclePassword </span><span class="built_in">--hive-table</span> <span class="string">HiveTableName</span></div></pre></td></tr></table></figure>
<p>然后在执行复制表中数据到hive中</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqoop <span class="keyword">import</span> --connect <span class="string">jdbc:</span><span class="string">oracle:</span><span class="string">thin:</span><span class="meta">@xxx</span>.xxx.xxx.<span class="string">xx:</span><span class="string">xxxx:</span>BaseName --username OracleUserName --password OraclePassWord --table OracleTableName --hive-<span class="keyword">import</span> -hive-table HiveTableName -m <span class="number">8</span></div></pre></td></tr></table></figure>
<p>8指的是利用8个MapReduce</p>
<p>结果将第一个指令错写成</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqoop <span class="keyword">import</span> --hive-<span class="keyword">import</span> --connect <span class="string">jdbc:</span><span class="string">oracle:</span><span class="string">thin:</span><span class="meta">@xxx</span>.xxx.xxx.<span class="string">xx:</span><span class="string">xxxx:</span>BaseName --table OracleTableName --username OracleUserName --password OraclePassWord --hive-table HiveTableName</div></pre></td></tr></table></figure>
<p>后又执行了复制表中数据的指令 导致数据翻倍</p>
<p>纠正后恢复正常<br>但是发现A表中509条数据没问题 ，但是B表中由原先的40多万条 翻了9倍。<br>后发现是因为B表的数据中存在的换行符。</p>
<p>而sqoop默认以换行符<figure class="highlight plain"><figcaption><span>作为列与列之间的分隔。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">查询网上资料后发现可以用</div></pre></td></tr></table></figure></p>
<p>–fields-terminated-by ‘\0001’<br>–lines-terminated-by ‘\n’<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">来重新设置行与列之间的分隔符</div><div class="line"></div><div class="line">据网上的资料显示这里必须使用```fields-terminated-by```而不是```--input-fields-terminated-by</div></pre></td></tr></table></figure></p>
<p>–input前缀的使用用于读文件的分割符号，便于解析文件，所以用于从HDFS导出数据的时候</p>
<p>还有参数必须要用单引号括起来，在这里官方文件给的例子是错的。</p>
<p>还必须小心hive的bug，如果用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">但如果直接写成```\u0001``` hive的某些版本会变成```u0001</div></pre></td></tr></table></figure></p>
<p>如果说导入的数据中某个字段含有<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">就像我遇到的这种情况，此时可以使用</div></pre></td></tr></table></figure></p>
<p>-hive-drop-import-delims<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">这个指令可以从string字段中drops \n \r \<span class="number">01</span> 这些符号。</div><div class="line"></div><div class="line">在这里顺便记录几个可能会遇到的错误以及解决的办法，没准以后有用</div><div class="line"></div><div class="line"></div><div class="line">### <span class="number">1.</span>用sqoop <span class="keyword">import</span>从mysql数据库导入到HDFS中的时候一直报错，最后才发现是一个时间日期类型的非法值导致。</div><div class="line"></div><div class="line">hive只支持timestamp类型，而mysql中的日期类型是datetime， 当datetime的值为<span class="number">0000</span><span class="number">-00</span><span class="number">-00</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>的时候，sqoop <span class="keyword">import</span>成功，但是在hive中执行select语句查询该字段的时候报错。</div><div class="line"></div><div class="line">#### 解决方法是在创建hive表时用string字段类型</div><div class="line"></div><div class="line"></div><div class="line">### <span class="number">2.</span>hive中有些关键字限制，因此有些字段名称在mysql中可用，但是到了hive就不行。</div><div class="line"></div><div class="line">比如order必须改成order1, 下面列出了我们发现的一些不能在hive中使用的字段名称</div></pre></td></tr></table></figure></p>
<p>order =&gt; order1</p>
<p>sort =&gt; sort1</p>
<p>reduce =&gt; reduce1</p>
<p>cast =&gt; cast1</p>
<p>directory =&gt; directory1</p>
<p>```</p>
<p>好了言归正传 在使用了<code>-hive-drop-import-delims</code>后，B表导入后的数据总量确实正确了但是我查询了一条记录后发现输出为15条，同样的sql语句在orcale中执行输出仅为一条，这又是一个奇怪的问题,仍在寻在原因以及解决方法。</p>
<p>在oracel查询其余14条记录后发现，当执行查询某字段为100000000122752873时，实际输出的是该字段<br>100000000122752873 – 100000000122752887的相邻15条记录由此判断 有可能是该字段的数据格式有问题导致精度出错。</p>
<p>询问了一些人后得知貌似只能在导入数据前就按自己想要的格式先建好表才行。</p>
<p>因为这个问题不影响到后续的功能，此处还未排查修复。有时间再来试试。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;利用sqoop从oracle导入现有表格和数据到hive时出现数据量倍增&quot;&gt;&lt;a href=&quot;#利用sqoop从oracle导入现有表格和数据到hive时出现数据量倍增&quot; class=&quot;headerlink&quot; title=&quot;利用sqoop从oracle导入现有表格
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js-面向对象</title>
    <link href="http://yoursite.com/2017/01/17/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/01/17/js-面向对象/</id>
    <published>2017-01-17T14:07:28.000Z</published>
    <updated>2017-02-03T07:44:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript面向对象编程"><a href="#JavaScript面向对象编程" class="headerlink" title="JavaScript面向对象编程"></a>JavaScript面向对象编程</h1><h2 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h2><p>因为ECMAScript是没有对象概念的</p>
<p>“无序属性的集合”  “其属性可以包括方法、基本值、或者函数”</p>
<p>ECMAScript中有两种属性：数据属性和访问器属性</p>
<p>数据属性：包括一个值的位置   可以读取和写入<br>有四个特性：</p>
<ol>
<li>[Configurable] : 表示能否通过delete删除属性从而重新定义属性或者是能够把属性修改为访问器属性，直接在对象上定义的属性，它们的这个特性值默认为true</li>
<li>[Enumerable] : 表示能通过for-in循环返回属性。直接在对象上定义的属性，它们的这个特性值默认为true</li>
<li>[Writable] : 表示能否修改属性的值。直接在对象上定义的属性，它们的这个特性值默认为true</li>
<li><p>[Value] : 包含这个属性的数据值。默认为undefined。</p>
<p>访问器属性：不包括数据值，包括一对getter和setter函数（都不是必须的）</p>
<p>也有四个特征：</p>
</li>
<li><p>[Configurable] : 表示能否通过delete删除属性从而重新定义属性，能否修改属性的特征，或者能否把属性修改为数据属性。对于直接在对象上定义的属性，这个特征的默认值为true。</p>
</li>
<li>[Enumerable] : 表示能否通过for-in循环返回属性。 直接在对象上定义的属性，它们的这个特性值默认为true</li>
<li>[Get] : 在读取属性时调用的函数。默认值为undefined</li>
<li><p>[Set] : 在写入属性时调用的函数。默认值为undefined</p>
<p>访问器属性不能直接定义，必须使用Object.defineProperty()来定义。<br>例如：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> book = &#123;</div><div class="line"> 	_year: <span class="type">2004</span>,</div><div class="line"> 	edition: <span class="type">1</span></div><div class="line"> &#125;;</div><div class="line"> Object.defineProperty(book,<span class="string">"year"</span>,&#123;</div><div class="line"> 	<span class="keyword">get</span>: <span class="type">function</span>()&#123;</div><div class="line"> 	<span class="keyword">return</span> <span class="built_in">this</span>._year;</div><div class="line"> &#125;,</div><div class="line"> <span class="keyword">set</span>: <span class="type">function</span>(<span class="keyword">new</span><span class="type">Value</span>)&#123;</div><div class="line"> 	<span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Value</span> &gt; <span class="number">2004</span>)&#123;</div><div class="line"> 		<span class="built_in">this</span>._year = <span class="keyword">new</span><span class="type">Value</span>;</div><div class="line"> 		<span class="built_in">this</span>.edition += <span class="keyword">new</span><span class="type">Value</span> - <span class="number">2004</span>;</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>ECMAScript5的Object.getOwnPropertyDescriptor()方法，可以取得给定属性的描述符。<br>其接受两个参数：属性所在对象和要读取其描述符的属性名称，返回值是一个对象。</p>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><hr>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function createPerson(name, age, <span class="keyword">job)&#123;</span></div><div class="line">	var o = new Object()<span class="comment">;</span></div><div class="line">	o.name = name<span class="comment">;</span></div><div class="line">	o.age = age<span class="comment">;</span></div><div class="line">	o.<span class="keyword">job </span>= <span class="keyword">job;</span></div><div class="line">	o.sayName = funciton()&#123;</div><div class="line">		alert(this.name)<span class="comment">;</span></div><div class="line">	&#125;<span class="comment">;</span></div><div class="line">	return o<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解决了创建多个相似对象的问题，但是不能解决对象识别的问题</p>
<h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><hr>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name, age, job)</span></span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">	<span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>.name);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>没有显示的创建对象；</li>
<li>直接将属性值和方法赋给了this对象</li>
<li>没有return语句</li>
</ol>
<hr>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当做构造函数使用</span></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"jack"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line">person.sayName(); </div><div class="line">	</div><div class="line"><span class="comment">//当做普通函数使用</span></div><div class="line">Person(<span class="string">"jack"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);<span class="comment">//添加到windows</span></div><div class="line"><span class="built_in">window</span>.sayName();</div><div class="line">	</div><div class="line"><span class="comment">//在另个一个对象的作用域中调用</span></div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">Person.call(o, <span class="string">"jack"</span>, <span class="number">25</span>, <span class="string">"Nurse"</span>);</div><div class="line">o.sayName();</div></pre></td></tr></table></figure>
<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><hr>
<p>1.无论什么时候，只要创建了一个新的函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。默认情况下，所有的原型对象都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向prototype属性所在函数的指针。</p>
<p><img src="/2017/01/17/js-面向对象/js-prototype 各个对象之间的关系.jpg" alt="logo"></p>
<p>虽然可以通过对象实例访问保存在原型中的值，但却不能通过对象实例重写原型中的值。如果我们在实例中添加了一个属性，而这个属性与实例原型中的一个属性同名，那么我们就在实例中创建该属性，该属性会屏蔽原型中的那个属性。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span></span>&#123;	</div><div class="line">&#125;	</div><div class="line">Person.prototype.name =  <span class="string">"Nicholas"</span>;</div><div class="line">Person.prototype.age =  <span class="number">28</span>;</div><div class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</div><div class="line">	alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line">person1.name = <span class="string">"Greg"</span>;</div><div class="line"></div><div class="line">alert(person1.name);    <span class="comment">//来自实例“Greg”</span></div><div class="line">alert(person2.name);	<span class="comment">//来自原型“Nicholas”</span></div></pre></td></tr></table></figure>
<p> 即使将这个属性设置为null，也只会在实例中设置这个属性，而不会恢复其指向原型的链接。   不过delete操作符则可以完全的删除实例属性，从而让我们能重新访问原型中的属性</p>
<p>2.有两种方式使用in操作符：单独使用和在for-in循环张使用。单独使用时，in操作符会在通过对象能够访问给定属性时返回true，无论该属性存在与实例中还是原型中。</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span></span>()&#123;</div><div class="line">&#125;	</div><div class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</div><div class="line">Person.prototype.age = <span class="number">25</span>;</div><div class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>;</div><div class="line">Person.prototype.sayName = funciton() &#123;</div><div class="line">	alert(<span class="built_in">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="type">Person</span>();</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="type">Person</span>();</div><div class="line"></div><div class="line">alert(person1.hasOwnPrototy(<span class="string">"name"</span>)); <span class="comment">//false</span></div><div class="line">alert(<span class="string">"name"</span> <span class="keyword">in</span> person1);             <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>3.前面的例子中每添加一个属性和方法就要写一遍Person.prototype。为了减少不必要的输入，更好的封装原型的功能，可以这样写</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</div><div class="line">&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">	name : <span class="string">"Nicholas"</span>,</div><div class="line">	age : <span class="number">29</span>,</div><div class="line">	job : <span class="string">"Software Engineer"</span>,</div><div class="line">	sayName : <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>.name);</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果通过这样创建的新对象，constructor属性不再指向Person了。之前说过没创建一个函数，就会同时创建他的prototype对象，这个对象也会自动获得constructor属性。然而上面的这种方法，本质上重写了默认的prototype对象，因此constructor属性也就变成了新对象的constructor属性（指向Object构造函数），不再指向Person函数。</p>
<p>  虽然instanceof操作符还是能返回正确的结果，但是通过constructor已经无法确定对象的类型了。</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> friend = <span class="function"><span class="keyword">new</span> <span class="title">Person</span>();</span></div><div class="line"></div><div class="line"><span class="title">alert</span>(friend instanceof <span class="type">Object</span>);  <span class="comment">//true</span></div><div class="line"><span class="title">alert</span>(friend instanceof <span class="type">Person</span>);  <span class="comment">//true</span></div><div class="line"><span class="title">alert</span>(friend.constructor == <span class="type">Person</span>); <span class="comment">//false</span></div><div class="line"><span class="title">alert</span>(friend.constructor == <span class="type">Object</span>); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>4.在原型中查找值的过程是一次搜索，因此我们在对原型对象上所做的任何修改都能够立即从实例上反映出来，即使是先创建了实例后修改原型也照样如此。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">	alert(<span class="string">"hi"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">friend.sayHi(); <span class="comment">//"hi"</span></div></pre></td></tr></table></figure>
<p>但如果是重写整个原型对象，那么情况会变得不一样。调用构造函数时会为实例添加一个指向最初原型的[[Prototype]]指针，而把原型修改为另一个对象就等于切断了构造函数与最初原型之间的联系。</p>
<blockquote>
<p>记住：实例中的指针仅指向原型，而不指向构造函数。</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">	constructor : Person,</div><div class="line">	name : <span class="string">"Nicholas"</span>,</div><div class="line">	age : <span class="number">29</span>,</div><div class="line">	job : <span class="string">"Software Engineer"</span>,</div><div class="line">	sayName : <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>.name);		</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">friend.sayName();  <span class="comment">//error</span></div></pre></td></tr></table></figure>
<p><img src="/2017/01/17/js-面向对象/重写原型对象.png" alt="重写原型对象"></p>
<p>5.通过原生对象的原型，不仅可以取得所有默认方法的引用，而且可以定义新方法。可以像修改自己定义对象的原型一样修改原声对象的原型，因此可以随时添加方法。</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">String</span>.prototype.statrsWith = funciton (<span class="built_in">text</span>) &#123;</div><div class="line">	<span class="built_in">return</span> <span class="keyword">this</span>.indexof(<span class="built_in">text</span>) == <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var msg = <span class="string">"Hello world!"</span>;</div><div class="line">alert(msg.statrsWith(<span class="string">"Hello"</span>)); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>6.原型模式也不是没有缺点。首先，他省略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下都将取得相同的属性值。虽然会在某种程度上带来一些不方便，但还不是原型的最大问题。  原型的最大问题是由其共享本性所导致的。</p>
<p>  原型中所有的属性是被很多实例共享的，这种共享对于函数来说非常的合适。对于那些包含基本值的属性倒也说得过去，但是对于包含引用类型值得属性来说，问题就比较突出了。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">	constructor : Person,</div><div class="line">	name : <span class="string">"Nicholas"</span>,</div><div class="line">	age : <span class="number">29</span>,</div><div class="line">	job : <span class="string">"Software Engineer"</span>,</div><div class="line">	friends : [<span class="string">"shelby"</span>, <span class="string">"Court"</span>],</div><div class="line">	sayName : <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>.name);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">person1.friends.push(<span class="string">"Van"</span>);</div><div class="line"></div><div class="line">alert(person1.friends); <span class="comment">//"Shelby,Court,Van"</span></div><div class="line">alert(person2.friends); <span class="comment">//"Shelby,Court,Van"</span></div><div class="line">alert(person1.friends === person2.friends); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>这也正是很少有人会单独使用原型模式的原因所在</p>
<h3 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h3><hr>
<p>在前几种模式都不适用的情况下，可以适用寄生构造函数模式。<br>这种模式的基本思想市创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后返回新创建的对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">	o.name = name;</div><div class="line">	o.age = age;</div><div class="line">	o.job = job;</div><div class="line">	o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>.name);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line">friend.sayName();   <span class="comment">//"Nicholas"</span></div></pre></td></tr></table></figure>
<p>这个模式可以在特殊情况下用来为对象创建构造函数。假设我们想创建一个具有额外方法的特殊数组。由于不能直接修改Array构造函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialArray</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//创建数组</span></div><div class="line">	<span class="keyword">var</span> values = <span class="keyword">new</span> Arrary();</div><div class="line">	</div><div class="line">	<span class="comment">//添加值</span></div><div class="line">	values.push.apply(values, <span class="built_in">arguments</span>);</div><div class="line">	</div><div class="line">	<span class="comment">//添加方法</span></div><div class="line">	values.toPipedString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.join(<span class="string">"|"</span>);</div><div class="line">	&#125;;</div><div class="line">	</div><div class="line">	<span class="comment">//返回数组</span></div><div class="line">	<span class="keyword">return</span> values;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> SpecialArray(<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>);</div><div class="line">alert(colors.toPipedString()); <span class="comment">//"red|blue|green"</span></div></pre></td></tr></table></figure>
<h3 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h3><hr>
<p>稳妥对象最适合在一些安全的环境中使用（这些环境会禁止使用this和new），或者在防止数据被其他程序改动时使用。 稳妥构造函数遵循与寄生构造函数类似的模式，但是有两点不同：一是新创建对象的实例方法不引用this，二是不实用new操作符调用构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">	<span class="comment">//创建要返回的对象</span></div><div class="line">	<span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">	</div><div class="line">	<span class="comment">//可以在这里定义私有变量和函数</span></div><div class="line">	</div><div class="line">	<span class="comment">//添加方法</span></div><div class="line">	o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		alert(name);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//返回对象</span></div><div class="line">	<span class="keyword">return</span> o;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这种模式创建的对象中，除了实用sayName（）方法之外，没有其他方法访问name值。可以这样实用稳妥的Person构造函数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var <span class="keyword">friend</span> = Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">friend</span>.sayName(); <span class="comment">//"Nicholas"</span></div></pre></td></tr></table></figure>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>接口继承和实现继承</p>
<p>接口继承只继承方法签名，而实现继承则继承实际的方法。<br>由于函数没有签名，在ECMAScript中无法实现接口继承，只能实现实现继承，其实现继承主要是依靠原型链来实现</p>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><hr>
<p>其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。</p>
<blockquote>
<p>每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。</p>
</blockquote>
<p>如果我们让原型对象等于另一个类型的实例，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">this</span>.property = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.property;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">this</span>.subproperty = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//继承了SuperType</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line"></div><div class="line">SubType.prototype.getSubValue = funciton () &#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance.getSuperValue()); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p><img src="/2017/01/17/js-面向对象/实例构造函数与原型之间的关系.png" alt="原型与构造函数之间的关系"></p>
<p>原型与构造函数和实例之间的关系如图所示</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript面向对象编程&quot;&gt;&lt;a href=&quot;#JavaScript面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;JavaScript面向对象编程&quot;&gt;&lt;/a&gt;JavaScript面向对象编程&lt;/h1&gt;&lt;h2 id=&quot;理解对象&quot;&gt;&lt;a 
    
    </summary>
    
    
      <category term="js 面向对象" scheme="http://yoursite.com/tags/js-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>关于Spring aop的一点理解</title>
    <link href="http://yoursite.com/2017/01/14/%E5%85%B3%E4%BA%8ESpring-aop%E7%9A%84%E4%B8%80%E7%82%B9%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/01/14/关于Spring-aop的一点理解/</id>
    <published>2017-01-14T04:17:36.000Z</published>
    <updated>2017-01-17T14:06:45.000Z</updated>
    
    <content type="html"><![CDATA[<p> 工作中要完成Spring+Quartz的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 工作中要完成Spring+Quartz的&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第一篇blog</title>
    <link href="http://yoursite.com/2017/01/11/why-i-can-t-see-my-new-post/"/>
    <id>http://yoursite.com/2017/01/11/why-i-can-t-see-my-new-post/</id>
    <published>2017-01-11T15:19:00.000Z</published>
    <updated>2017-07-18T13:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实搭建好Github+hexo的博客环境已经有些日子了。因为拖延症吧，好久都没有在这个平台上写过什么东西。倒是在博客园上写过几篇，是时候把他们转过来了。</p>
<p>对Markdown的语法还不是很熟悉。借着这个机会来熟悉一下。</p>
<p>‘# 一级标题’     </p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>‘## 二级标题’</p>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>以此类推吧</p>
<p>‘&gt; 引用’</p>
<blockquote>
<p>引用</p>
</blockquote>
<p>‘1.有序列表’</p>
<p>‘2.有序列表’</p>
<p>1.有序列表</p>
<p>2.有序列表</p>
<p>‘- 无序列表’ ‘* 无序列表’</p>
<ul>
<li>无序列表</li>
</ul>
<p>超链接的话’[baidu] (www.baidu.com)’（注意中间是没有空格的，为了演示效果才在中间加了空格）</p>
<p><a href="http://www.baidu.com" target="_blank" rel="external">Baidu</a></p>
<p>写代码的话只要用两个``把代码包围起来就可以了。。</p>
<p><code>System.out.println(&quot;hello world&quot;);</code></p>
<p>我记得在哪个软件上用到过 用``包围代码时，加上语言的名字，就可以智能得高亮代码的功能。</p>
<p>暂时用的到的也许就是这些了。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实搭建好Github+hexo的博客环境已经有些日子了。因为拖延症吧，好久都没有在这个平台上写过什么东西。倒是在博客园上写过几篇，是时候把他们转过来了。&lt;/p&gt;
&lt;p&gt;对Markdown的语法还不是很熟悉。借着这个机会来熟悉一下。&lt;/p&gt;
&lt;p&gt;‘# 一级标题’     
    
    </summary>
    
    
      <category term="hexo githubPage Markdown" scheme="http://yoursite.com/tags/hexo-githubPage-Markdown/"/>
    
  </entry>
  
</feed>
